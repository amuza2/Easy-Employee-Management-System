// <auto-generated />
using System;
using EEMS.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EEMS.DataAccess.Migrations
{
    [DbContext(typeof(EEMSDbContext))]
    [Migration("20250221024105_RenameJobNatureToEmployees")]
    partial class RenameJobNatureToEmployees
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EEMS.DataAccess.Models.Absence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AbsenceTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AbsenceTypeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Absences");
                });

            modelBuilder.Entity("EEMS.DataAccess.Models.AbsenceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AbsenceTypes");
                });

            modelBuilder.Entity("EEMS.DataAccess.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Human Resources"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Budget and Accounting"
                        },
                        new
                        {
                            Id = 3,
                            Name = "General Administration"
                        });
                });

            modelBuilder.Entity("EEMS.DataAccess.Models.DrivingLicenseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DrivingLicenseTypes");
                });

            modelBuilder.Entity("EEMS.DataAccess.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BirthLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EssentialTraining")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("FamilySituation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("JobNatureId")
                        .HasColumnType("int");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguagesSpoken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecruitmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Residence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Training")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("JobNatureId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main St, New York, USA",
                            BirthLocation = "New York, USA",
                            DateOfBirth = new DateTime(1990, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 1,
                            Email = "john.doe@example.com",
                            FamilySituation = "Single",
                            FirstName = "John",
                            Gender = 0,
                            IsActive = true,
                            IsDeleted = false,
                            JobNatureId = 1,
                            JobTitle = "Software Engineer",
                            LastName = "Doe",
                            Phone = "123-456-7890",
                            ProjectId = 1,
                            RecruitmentDate = new DateTime(2020, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Residence = "New York, USA",
                            Training = "C#, .NET, SQL"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Elm St, Los Angeles, USA",
                            BirthLocation = "Los Angeles, USA",
                            DateOfBirth = new DateTime(1985, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 2,
                            Email = "jane.smith@example.com",
                            FamilySituation = "Married",
                            FirstName = "Jane",
                            Gender = 1,
                            IsActive = true,
                            IsDeleted = false,
                            JobNatureId = 2,
                            JobTitle = "Project Manager",
                            LastName = "Smith",
                            Phone = "987-654-3210",
                            ProjectId = 2,
                            RecruitmentDate = new DateTime(2018, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Residence = "Los Angeles, USA",
                            Training = "PMP, Agile, Scrum"
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Oak St, Chicago, USA",
                            BirthLocation = "Chicago, USA",
                            DateOfBirth = new DateTime(1992, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 1,
                            Email = "alice.johnson@example.com",
                            FamilySituation = "Single",
                            FirstName = "Alice",
                            Gender = 1,
                            IsActive = true,
                            IsDeleted = false,
                            JobNatureId = 3,
                            JobTitle = "QA Engineer",
                            LastName = "Johnson",
                            Phone = "555-123-4567",
                            ProjectId = 1,
                            RecruitmentDate = new DateTime(2021, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Residence = "Chicago, USA",
                            Training = "Selenium, Manual Testing"
                        },
                        new
                        {
                            Id = 4,
                            Address = "321 Pine St, Houston, USA",
                            BirthLocation = "Houston, USA",
                            DateOfBirth = new DateTime(1988, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 3,
                            Email = "bob.brown@example.com",
                            FamilySituation = "Married",
                            FirstName = "Bob",
                            Gender = 0,
                            IsActive = true,
                            IsDeleted = false,
                            JobNatureId = 1,
                            JobTitle = "DevOps Engineer",
                            LastName = "Brown",
                            Phone = "444-555-6666",
                            ProjectId = 3,
                            RecruitmentDate = new DateTime(2019, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Residence = "Houston, USA",
                            Training = "Docker, Kubernetes, Azure"
                        },
                        new
                        {
                            Id = 5,
                            Address = "654 Beach St, Miami, USA",
                            BirthLocation = "Miami, USA",
                            DateOfBirth = new DateTime(1995, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 2,
                            Email = "charlie.davis@example.com",
                            FamilySituation = "Single",
                            FirstName = "Charlie",
                            Gender = 0,
                            IsActive = true,
                            IsDeleted = false,
                            JobNatureId = 3,
                            JobTitle = "UI/UX Designer",
                            LastName = "Davis",
                            Phone = "777-888-9999",
                            ProjectId = 1,
                            RecruitmentDate = new DateTime(2022, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Residence = "Miami, USA",
                            Training = "Figma, Adobe XD, Sketch"
                        });
                });

            modelBuilder.Entity("EEMS.DataAccess.Models.EmployeeDrivingLicense", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("DrivingLicenseTypeId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId", "DrivingLicenseTypeId");

                    b.HasIndex("DrivingLicenseTypeId");

                    b.ToTable("EmployeeDrivingLicenses");
                });

            modelBuilder.Entity("EEMS.DataAccess.Models.JobNature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JobNatures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Full-time Work"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Part-time Work"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Temporary Work"
                        });
                });

            modelBuilder.Entity("EEMS.DataAccess.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Gas maintanance",
                            Place = "Tamanraset"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Gas Finding",
                            Place = "Ain Salah"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Gas Tube Manufacture",
                            Place = "Djanat"
                        });
                });

            modelBuilder.Entity("EEMS.DataAccess.Models.Absence", b =>
                {
                    b.HasOne("EEMS.DataAccess.Models.AbsenceType", "AbsenceType")
                        .WithMany("Absences")
                        .HasForeignKey("AbsenceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EEMS.DataAccess.Models.Employee", "Employee")
                        .WithMany("Absences")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AbsenceType");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EEMS.DataAccess.Models.Employee", b =>
                {
                    b.HasOne("EEMS.DataAccess.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("EEMS.DataAccess.Models.JobNature", "JobNature")
                        .WithMany("Employees")
                        .HasForeignKey("JobNatureId");

                    b.HasOne("EEMS.DataAccess.Models.Project", "Project")
                        .WithMany("Employees")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Department");

                    b.Navigation("JobNature");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("EEMS.DataAccess.Models.EmployeeDrivingLicense", b =>
                {
                    b.HasOne("EEMS.DataAccess.Models.DrivingLicenseType", "DrivingLicenseType")
                        .WithMany("EmployeeDrivingLicenses")
                        .HasForeignKey("DrivingLicenseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EEMS.DataAccess.Models.Employee", "Employee")
                        .WithMany("EmployeeDrivingLicenses")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrivingLicenseType");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EEMS.DataAccess.Models.AbsenceType", b =>
                {
                    b.Navigation("Absences");
                });

            modelBuilder.Entity("EEMS.DataAccess.Models.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("EEMS.DataAccess.Models.DrivingLicenseType", b =>
                {
                    b.Navigation("EmployeeDrivingLicenses");
                });

            modelBuilder.Entity("EEMS.DataAccess.Models.Employee", b =>
                {
                    b.Navigation("Absences");

                    b.Navigation("EmployeeDrivingLicenses");
                });

            modelBuilder.Entity("EEMS.DataAccess.Models.JobNature", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("EEMS.DataAccess.Models.Project", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
